--// Services
local ReplicatedStorage = game:GetService("ReplicatedStorage")
local Workspace = game:GetService("Workspace")
local Players = game:GetService("Players")
local RunService = game:GetService("RunService")
local Lighting = game:GetService("Lighting")

--// Asset references
local Assets = ReplicatedStorage:WaitForChild("WeatherAssets")
local Skys = Assets:WaitForChild("Skys")
local Sounds = Assets:WaitForChild("Sounds")
local VFX = Assets:WaitForChild("VFX")

--// Effect templates
local rainTemplate = VFX:WaitForChild("Rain")
local lightningTemplate = VFX:WaitForChild("Lightning")

--// Sound templates
local lightningSoundTemplate = Sounds:WaitForChild("Thunder")
local thunderSoundTemplate = Sounds:WaitForChild("Thunder")
local rainSoundTemplate = Sounds:WaitForChild("Rain")

--// Weather settings
local weatherTypes = {"Clear", "Rain", "Thunder"}
local weatherWeights = {
	Clear = 5,
	Rain = 2,
	Thunder = 2,
}

--// Internal state
local lastWeather = nil
local rainParts = {}
local thunderRunning = false
local thunderTask = nil
local lightningParts = {}
local rainSoundInstance = nil

-- Replace the current skybox in Lighting with a new one
local function setSky(name)
	local oldSky = Lighting:FindFirstChildOfClass("Sky")
	if oldSky then oldSky:Destroy() end
	local sky = Skys:FindFirstChild(name)
	if sky then
		sky:Clone().Parent = Lighting
	end
end

-- Destroys all active rain effects and stops rain sounds
local function clearRain()
	for player, part in pairs(rainParts) do
		part:Destroy()
		rainParts[player] = nil
	end
	if rainSoundInstance then
		rainSoundInstance:Stop()
		rainSoundInstance:Destroy()
		rainSoundInstance = nil
	end
end

-- Creates rain effects above a player's character
local function createRainForPlayer(player)
	if rainParts[player] then return end
	local part = rainTemplate:Clone()
	part.Anchored = true
	part.CanCollide = false
	part.Parent = Workspace
	rainParts[player] = part
end

-- Updates positions of rain effects to follow each player's character
local function updateRainPositions()
	for player, part in pairs(rainParts) do
		local character = player.Character
		local hrp = character and character:FindFirstChild("HumanoidRootPart")
		if hrp then
			part.CFrame = CFrame.new(hrp.Position + Vector3.new(0, 40, 0))
		else
			part.CFrame = CFrame.new(0, 1000, 0)
		end
	end
end

-- Event: Player joins — create rain if necessary
Players.PlayerAdded:Connect(function(player)
	if lastWeather == "Rain" or lastWeather == "Thunder" then
		createRainForPlayer(player)
	end
end)

-- Event: Player leaves — remove any rain part associated with them
Players.PlayerRemoving:Connect(function(player)
	if rainParts[player] then
		rainParts[player]:Destroy()
		rainParts[player] = nil
	end
end)

-- Stops all active thunder tasks and destroys lightning visuals
local function stopThunder()
	thunderRunning = false
	if thunderTask then
		thunderTask:Cancel()
		thunderTask = nil
	end
	for _, part in pairs(lightningParts) do
		if part and part.Parent then
			part:Destroy()
		end
	end
	lightningParts = {}
end

-- Adjusts volume of provided sound instances based on proximity to a given position
local function updateSoundVolumes(sounds, position)
	local players = Players:GetPlayers()
	for _, sound in pairs(sounds) do
		local closestDist = math.huge
		for _, player in pairs(players) do
			local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
			if hrp then
				local dist = (hrp.Position - position).Magnitude
				if dist < closestDist then
					closestDist = dist
				end
			end
		end
		local volume = math.clamp(1 - closestDist / 100, 0, 1)
		sound.Volume = volume
	end
end

-- Mutes rain sound if any player is within a mute zone radius
local function updateRainSoundVolume(mutePosition, muteRadius)
	if not rainSoundInstance then return end
	local mute = false
	for _, player in pairs(Players:GetPlayers()) do
		local hrp = player.Character and player.Character:FindFirstChild("HumanoidRootPart")
		if hrp and (hrp.Position - mutePosition).Magnitude <= muteRadius then
			mute = true
			break
		end
	end
	rainSoundInstance.Volume = mute and 0 or 1
end

-- Recursive function to create branching lightning bolt
local function createForkingLightning(startPos, maxForks, branchLength)
	local function generateFork(pos, direction, depth)
		if depth > maxForks then return end

		local segment = Instance.new("Part")
		segment.Size = Vector3.new(0.2, branchLength, 0.2)
		segment.Anchored = true
		segment.CanCollide = false
		segment.Material = Enum.Material.Neon
		segment.Color = Color3.fromRGB(255, 255, 255)
		segment.Transparency = 0.25

		local offset = direction.Unit * branchLength
		local newPos = pos + offset
		local cframe = CFrame.new(pos, newPos) * CFrame.new(0, branchLength / 2, 0)
		segment.CFrame = cframe
		segment.Parent = Workspace
		table.insert(lightningParts, segment)

		-- Primary continuation
		if math.random() < 0.7 then
			local newDirection = (direction + Vector3.new(math.random() - 0.5, math.random() * 0.5, math.random() - 0.5)).Unit
			generateFork(newPos, newDirection, depth + 1)
		end

		-- Optional secondary fork
		if math.random() < 0.5 then
			local forkDirection = Vector3.new(math.random() - 0.5, math.random() * 0.5, math.random() - 0.5).Unit
			generateFork(newPos, forkDirection, depth + 1)
		end
	end

	local downward = Vector3.new(0, -1, 0)
	generateFork(startPos, downward, 1)
end

-- Spawns forking lightning effects and plays thunder near a player
local function spawnLightningNearPlayer(player)
	local character = player.Character
	if not character then return end
	local hrp = character:FindFirstChild("HumanoidRootPart")
	if not hrp then return end

	local offsetX = math.random(-20, 20)
	local offsetZ = math.random(-20, 20)
	local offsetY = math.random(10, 20)
	local spawnPos = hrp.Position + Vector3.new(offsetX, offsetY, offsetZ)

	createForkingLightning(spawnPos, 6, 4)

	local lightningSound = lightningSoundTemplate:Clone()
	lightningSound.Parent = Workspace
	lightningSound.Position = spawnPos
	lightningSound.RollOffMode = Enum.RollOffMode.Linear
	lightningSound.MaxDistance = 100
	lightningSound:Play()

	local thunderSound = thunderSoundTemplate:Clone()
	thunderSound.Parent = Workspace
	thunderSound.Position = spawnPos
	thunderSound.RollOffMode = Enum.RollOffMode.Linear
	thunderSound.MaxDistance = 150
	thunderSound:Play()

	-- Cleanup after delay
	local connection
	local startTime = tick()
	connection = RunService.Heartbeat:Connect(function()
		if tick() - startTime > 4 then
			for _, part in pairs(lightningParts) do
				if part and part.Parent then
					part:Destroy()
				end
			end
			lightningParts = {}
			connection:Disconnect()
		else
			updateSoundVolumes({lightningSound, thunderSound}, spawnPos)
			updateRainSoundVolume(spawnPos, 50)
		end
	end)
end

-- Periodically triggers lightning strikes near random players
local function thunderCycle()
	while thunderRunning do
		local players = Players:GetPlayers()
		if #players > 0 then
			local used = {}
			local strikes = math.min(#players, math.random(3, 7))
			for _ = 1, strikes do
				local idx repeat idx = math.random(1, #players) until not used[idx]
				used[idx] = true
				spawnLightningNearPlayer(players[idx])
			end
		end
		task.wait(math.random(10, 20))
	end
end

-- Starts thunder cycle if not already active
local function startThunder()
	if thunderRunning then return end
	thunderRunning = true
	thunderTask = task.spawn(thunderCycle)
end

-- Removes all sounds from Workspace
local function clearSounds()
	for _, sound in pairs(Workspace:GetChildren()) do
		if sound:IsA("Sound") then
			sound:Stop()
			sound:Destroy()
		end
	end
end

-- Applies the desired weather condition
local function applyWeather(weather)
	if weather == lastWeather then return end

	setSky(weather)
	clearSounds()
	stopThunder()
	clearRain()

	if weather == "Clear" then
		lastWeather = "Clear"

	elseif weather == "Rain" then
		for _, player in pairs(Players:GetPlayers()) do
			createRainForPlayer(player)
		end
		rainSoundInstance = rainSoundTemplate:Clone()
		rainSoundInstance.Parent = Workspace
		rainSoundInstance.Looped = true
		rainSoundInstance.Volume = 1
		rainSoundInstance:Play()
		lastWeather = "Rain"

	elseif weather == "Thunder" then
		for _, player in pairs(Players:GetPlayers()) do
			createRainForPlayer(player)
		end
		rainSoundInstance = rainSoundTemplate:Clone()
		rainSoundInstance.Parent = Workspace
		rainSoundInstance.Looped = true
		rainSoundInstance.Volume = 1
		rainSoundInstance:Play()
		startThunder()
		lastWeather = "Thunder"
	end
end

-- Chooses a new weather type using weighted randomness
local function chooseWeather()
	local totalWeight = 0
	for _, w in pairs(weatherWeights) do totalWeight += w end

	local pick = math.random() * totalWeight
	local cumulative = 0
	for _, weather in pairs(weatherTypes) do
		cumulative += weatherWeights[weather]
		if pick <= cumulative then
			return weather
		end
	end
	return weatherTypes[#weatherTypes]
end

-- Main loop that manages weather transitions
while true do
	local weather = chooseWeather()
	while weather == lastWeather do
		weather = chooseWeather()
	end

	applyWeather(weather)

	for _ = 1, math.random(60, 180) do
		updateRainPositions()
		task.wait(1)
	end
end
